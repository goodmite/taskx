{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "..\\..\\App.svelte",
    "..\\..\\CookieBanner.svelte",
    "..\\..\\Flower.svelte",
    "..\\..\\SVGVisualOver.svelte",
    "..\\..\\SVGVisualBelow.svelte",
    "..\\..\\CanvasVisual.svelte",
    "..\\..\\Legend.svelte",
    "..\\..\\CountrySearch.svelte",
    "..\\..\\CentralLineChart.svelte",
    "..\\..\\CountryHighlighter.svelte",
    "..\\..\\Continents.svelte",
    "..\\..\\YearLabels.svelte"
  ],
  "sourcesContent": [
    "<script>\r\n  import { csv } from 'd3-fetch';\r\n\r\n  import CookieBanner from './CookieBanner.svelte';\r\n  import Flower from './flower/Flower.svelte';\r\n\r\n  const years = [1998, 2008, 2018];\r\n\r\n  let data;\r\n\r\n  async function load() {\r\n    data = await csv('child_mortality.csv', d => { // /childhood-mortality\r\n      const dataArr = [];\r\n      const returnObj = {\r\n        iso: d.iso,\r\n        country: d.country,\r\n        reduction: +d.reduction,\r\n        continent: d.continent\r\n      };\r\n      for (let key in d) {\r\n        if (key.match('^19|^20')) dataArr.push({year: +key, value: +d[key]});\r\n      }\r\n      returnObj['dataArr'] = dataArr;\r\n      return returnObj;\r\n    });\r\n  }\r\n\r\n  load();\r\n</script>\r\n\r\n<div class=\"wrapper\">\r\n  <CookieBanner />\r\n  <div class=\"header\">\r\n    <h1>The circle of hope</h1>\r\n  </div>\r\n  <div id=\"visual\">\r\n    {#if data}\r\n      <Flower {data} {years} />\r\n    {/if}\r\n  </div>\r\n</div>\r\n\r\n<style>\r\n  .wrapper {\r\n    width: 95%;\r\n    height: 100%;\r\n    margin: 0 auto;\r\n  }\r\n\r\n  .header {\r\n    width: 100%;\r\n    margin: 1.5rem 0;\r\n    color: var(--blue);\r\n  }\r\n\r\n  .header h1 {\r\n    font-family: 'Ibarra Real Nova', serif;\r\n    font-weight: normal;\r\n    font-size: calc(3rem + 7px);\r\n    /* text-align: center; */\r\n  }\r\n\r\n  #visual {\r\n    position: relative;\r\n    width: 100%;\r\n    height: 100vmin;\r\n  }\r\n</style>\r\n",
    "<div id=\"cookies-eu-banner\">\r\n  Would be great to know where you all come from. So do you accept the use of cookies for Google Analytics?\r\n  <button id=\"cookies-eu-reject\">Reject</button>\r\n  <button id=\"cookies-eu-accept\">Accept</button>\r\n</div>\r\n\r\n<style>\r\n  #cookies-eu-banner {\r\n    position: absolute;\r\n    z-index: 1000;\r\n    bottom: 0;\r\n    left: 0;\r\n    display: none;\r\n    width: 100%;\r\n    padding: 1rem;\r\n    color: white;\r\n    font-family: 'Arial', sans-serif;\r\n    font-size: 1rem;\r\n    background-color: var(--red);\r\n  }\r\n\r\n  #cookies-eu-banner button {\r\n    position: relative;\r\n    margin: 0 0.1rem;\r\n    padding: 0.1rem;\r\n    font-size: 0.8rem;\r\n    border-radius: 0.2rem;\r\n    background-color: white;\r\n    text-decoration: none;\r\n    border: none;\r\n    outline: none;\r\n  }\r\n\r\n  #cookies-eu-banner button:hover {\r\n    cursor: pointer;\r\n  } \r\n</style>\r\n",
    "<script>\r\n  import { range, max, extent } from 'd3-array';\r\n  import { scaleLinear, scaleOrdinal } from 'd3-scale';\r\n\r\n  import CanvasVisual from './CanvasVisual.svelte';\r\n  import SVGVisualBelow from './SVGVisualBelow.svelte';\r\n  import SVGVisualOver from './SVGVisualOver.svelte';\r\n  import CountrySearch from './CountrySearch.svelte';\r\n\r\n  import Legend from './Legend.svelte';\r\n\r\n  export let data;\r\n  export let years;\r\n\r\n  const offset = 10;\r\n  const angleOffset = 0;\r\n\r\n  let selectedIso;\r\n\r\n  // Dimensions\r\n  let rawWidth = offset;\r\n  let rawHeight = offset;\r\n\r\n  // Scales\r\n  let scYearColor, scCountryAngle, scYearRadius, scMortRate, scReduction;\r\n\r\n  function initScales(minDim) {\r\n    scYearColor = scaleOrdinal()\r\n      .domain(years)\r\n      .range(['#F40000', 'rgb(236, 54, 9)', 'rgb(245, 120, 86)']);\r\n\r\n    scCountryAngle = scaleOrdinal()\r\n      .domain(data.map(d => d.iso))\r\n      .range(range(angleOffset, 2 * Math.PI - angleOffset, (2 * Math.PI - 2 * angleOffset) / data.length));\r\n\r\n    scYearRadius = scaleLinear()\r\n      .domain([years[0], years[years.length - 1]])\r\n      .range([minDim / 5, minDim / 2.4 - padding]);\r\n\r\n    scMortRate = scaleLinear()\r\n      .domain([0, 1.2 * max([].concat(...data.map(d => d.dataArr.filter(d => years.includes(d.year)).map(d => d.value))))])\r\n      .range([0, minDim / 9]);\r\n\r\n    scReduction = scaleLinear()\r\n      .domain(extent(data.map(d => d.reduction)))\r\n      .range([Math.min(scYearRadius(years[years.length - 1]) + reductionOffset, minDim / 2 - padding), minDim / 2 - padding]);\r\n  }\r\n\r\n  $: width = rawWidth - offset;\r\n  $: height = rawHeight - offset;\r\n  $: minDim = Math.min(width, height);\r\n  $: padding = minDim / 40;\r\n  $: reductionOffset = minDim / 40;\r\n\r\n  $: if (data && years) initScales(minDim);\r\n</script>\r\n\r\n<svelte:body on:click={() => selectedIso = undefined}/>\r\n\r\n<div class=\"info\">\r\n  <div class=\"intro\">\r\n    <div class=\"text\">\r\n      5.3 million children under five <span class=\"red\">died</span> in 2018.\r\n      This is on average 15,000 children per day. However, the mortality rates are in fact declining.\r\n      Still 30 years ago, 12.5 million kids <span class=\"red\">died</span> before their fifth birthday.\r\n      Within the last 20 years, the mortality rates fell for every country in the world. Almost.\r\n    </div>\r\n    {#if (width > 600)}\r\n      <div class=\"search\">\r\n        <CountrySearch data={data}\r\n                      on:isochanged={(e) => selectedIso = e.detail}/>\r\n      </div>\r\n    {/if}\r\n  </div>\r\n  <div class=\"legend\">\r\n    <div class=\"text\">How to read this chart:</div>\r\n    <Legend data={data}\r\n            scMortRate={scMortRate} />\r\n    <div class=\"data-info\">Median under five-year mortality rates are taken from the <a href=\"https://data.unicef.org/topic/child-survival/under-five-mortality/\">official resource</a> of the UN Inter-agency Group for Child Mortality Estimation.</div>\r\n    <div class=\"imprint\">\r\n      <img src=\"logo.svg\" alt=\"higsch-logo\" />\r\n      Higsch Data Visuals,&nbsp; <a href=\"https://www.linkedin.com/in/matthias-stahl/\">Matthias Stahl</a>, 2020\r\n    </div>\r\n  </div>\r\n  {#if (width <= 600)}\r\n    <div class=\"search small\">\r\n      <CountrySearch data={data}\r\n                    on:isochanged={(e) => selectedIso = e.detail}/>\r\n    </div>\r\n  {/if}\r\n</div>\r\n<div class=\"wrapper\" bind:offsetWidth={rawWidth} bind:offsetHeight={rawHeight}>\r\n  {#if (minDim > 0)}\r\n  <SVGVisualBelow width={width}\r\n                  height={height}\r\n                  offset={offset}\r\n                  data={data}\r\n                  years={years}\r\n                  scCountryAngle={scCountryAngle}\r\n                  scYearRadius={scYearRadius}\r\n                  scReduction={scReduction} />\r\n  <CanvasVisual width={width}\r\n              height={height}\r\n              offset={offset}\r\n              data={data}\r\n              years={years}\r\n              scYearColor={scYearColor}\r\n              scCountryAngle={scCountryAngle}\r\n              scYearRadius={scYearRadius}\r\n              scMortRate={scMortRate}\r\n              selectedIso={selectedIso} />\r\n  <SVGVisualOver width={width}\r\n                 height={height}\r\n                 offset={offset}\r\n                 data={data}\r\n                 years={years}\r\n                 scCountryAngle={scCountryAngle}\r\n                 scYearRadius={scYearRadius}\r\n                 scReduction={scReduction}\r\n                 scMortRate={scMortRate}\r\n                 selectedIso={selectedIso}\r\n                 on:isochanged={(e) => selectedIso = e.detail} />\r\n  {/if}\r\n</div>\r\n\r\n<style>\r\n  .info {\r\n    display: flex;\r\n    flex-direction: row;\r\n    flex-wrap: wrap;\r\n    align-items: stretch;\r\n    justify-content: space-between;\r\n    width: 100%;\r\n    height: auto;\r\n    color: var(--blue);\r\n  }\r\n\r\n  .info > div {\r\n    width: 47%;\r\n    height: 100%;\r\n    margin-bottom: 0;\r\n  }\r\n\r\n  @media (max-width: 600px) {\r\n    .info > div {\r\n      width: 100%;\r\n      margin-bottom: 1.5rem;\r\n    }\r\n  }\r\n\r\n  .intro {\r\n    display: flex;\r\n    flex-direction: column;\r\n  }\r\n\r\n  .text {\r\n    text-align: justify;\r\n    line-height: 1.7;\r\n  }\r\n\r\n  .search {\r\n    display: flex;\r\n    flex-direction: column;\r\n    margin: 2rem 0 0 0;\r\n  }\r\n\r\n  .search.small {\r\n    align-items: center;\r\n  }\r\n  \r\n  .data-info {\r\n    font-size: 0.9rem;\r\n    font-style: italic;\r\n    line-height: 1.7;\r\n  }\r\n\r\n  .imprint {\r\n    display: flex;\r\n    margin: 1rem 0;\r\n    align-items: center;\r\n    font-size: 0.7rem;\r\n  }\r\n\r\n  .imprint img {\r\n    width: 1.7rem;\r\n    margin: 0 0.6rem 0 0;\r\n  }\r\n\r\n  .wrapper {\r\n    width: 100%;\r\n    height: 100%;\r\n  }\r\n</style>\r\n",
    "<script>\r\n  import Defs from './Defs.svelte';\r\n  import YearLabels from './YearLabels.svelte';\r\n  import CentralLineChart from './CentralLineChart.svelte';\r\n  import CountryLabels from './CountryLabels.svelte';\r\n  import CountryHighlighter from './CountryHighlighter.svelte';\r\n  import IsoDetector from './IsoDetector.svelte';\r\n\r\n  export let width;\r\n  export let height;\r\n  export let offset;\r\n  export let data;\r\n  export let years;\r\n  export let scCountryAngle;\r\n  export let scYearRadius;\r\n  export let scReduction;\r\n  export let scMortRate;\r\n  export let selectedIso;\r\n\r\n  $: innerRadius = scYearRadius(years[0]) * 0.62;\r\n  $: countryRadius = scReduction.range()[1];\r\n</script>\r\n\r\n<svg class=\"svg-visual\"\r\n     width={width}\r\n     height={height}\r\n     style=\"margin: {offset / 2}px;\">\r\n  <Defs scReduction={scReduction} />\r\n  <YearLabels width={width}\r\n              height={height}\r\n              years={years}\r\n              scYearRadius={scYearRadius} />\r\n  <CentralLineChart width={width}\r\n                    height={height}\r\n                    data={data}\r\n                    selectedIso={selectedIso}\r\n                    radius={innerRadius} />\r\n  <CountryLabels width={width}\r\n                 height={height}\r\n                 data={data.map(d => ({iso: d.iso, country: d.country}))}\r\n                 scCountryAngle={scCountryAngle}\r\n                 radius={countryRadius}\r\n                 selectedIso={selectedIso} />\r\n  <CountryHighlighter width={width}\r\n                      height={height}\r\n                      data={data}\r\n                      years={years}\r\n                      scCountryAngle={scCountryAngle}\r\n                      scYearRadius={scYearRadius}\r\n                      scMortRate={scMortRate}\r\n                      scReduction={scReduction}\r\n                      selectedIso={selectedIso} />\r\n  <IsoDetector width={width}\r\n               height={height}\r\n               radius={scReduction.range()[1]}\r\n               scCountryAngle={scCountryAngle}\r\n               selectedIso={selectedIso}\r\n               on:isochanged />\r\n</svg>\r\n\r\n<style>\r\n  svg {\r\n    position: absolute;\r\n  }\r\n</style>\r\n",
    "<script>\r\n  import Defs from './Defs.svelte';\r\n  import Continents from './Continents.svelte';\r\n  import ReductionPath from './ReductionPath.svelte';\r\n\r\n  export let width;\r\n  export let height;\r\n  export let offset;\r\n  export let data;\r\n  export let years;\r\n  export let scCountryAngle;\r\n  export let scYearRadius;\r\n  export let scReduction;\r\n\r\n  let continentsData;\r\n\r\n  function loadContinentsData() {\r\n    const uniqueContinents = [...new Set(data.map(d => d.continent))];\r\n    continentsData = uniqueContinents.map(continent => {\r\n      const raw = data.map(d => d.continent);\r\n      return {\r\n        startAngle: scCountryAngle(data[raw.indexOf(continent)].iso),\r\n        endAngle: scCountryAngle(data[raw.lastIndexOf(continent)].iso),\r\n        continent\r\n      };\r\n    });\r\n  }\r\n\r\n  // Prepare data for continent labels\r\n  $: if (data) loadContinentsData();\r\n</script>\r\n\r\n<svg class=\"svg-visual\"\r\n     width={width}\r\n     height={height}\r\n     style=\"margin: {offset / 2}px;\">\r\n  <Defs scReduction={scReduction} />\r\n  <ReductionPath width={width}\r\n                 height={height}\r\n                 data={data}\r\n                 scCountryAngle={scCountryAngle}\r\n                 scReduction={scReduction} />\r\n  <Continents width={width}\r\n              height={height}\r\n              data={continentsData}\r\n              years={years}\r\n              scYearRadius={scYearRadius} />\r\n</svg>\r\n\r\n<style>\r\n  svg {\r\n    position: absolute;\r\n  }\r\n</style>\r\n",
    "<script>\r\n  import { onMount } from 'svelte';\r\n\r\n  export let width;\r\n  export let height;\r\n  export let offset;\r\n  export let data;\r\n  export let years;\r\n  export let scYearColor;\r\n  export let scCountryAngle;\r\n  export let scYearRadius;\r\n  export let scMortRate;\r\n  export let selectedIso;\r\n\r\n  const canvasScaleFactor = 2;\r\n\r\n  // Elements\r\n  let canvas, ctx;\r\n\r\n  function init() {\r\n    canvas.width = canvasScaleFactor * width;\r\n    canvas.height = canvasScaleFactor * height;\r\n    canvas.style.width = `${width}px`;\r\n    canvas.style.height = `${height}px`;\r\n    canvas.style.margin = `${offset / 2}px`;\r\n\r\n    ctx.scale(canvasScaleFactor, canvasScaleFactor);\r\n    ctx.translate(width / 2, height / 2);\r\n\r\n    ctx.globalCompositeOperation = 'luminosity';\r\n  }\r\n\r\n  function draw(width, height, selectedIso) {\r\n    ctx.clearRect(-width / 2, -height / 2, width, height);\r\n    ctx.globalAlpha = selectedIso ? 0.1 : 0.4;\r\n\r\n    years.forEach(year => {\r\n      ctx.fillStyle = scYearColor(year);\r\n      data.forEach(d => {\r\n        const yearData = d.dataArr.find(d => d.year === year);\r\n        const x = Math.sin(Math.PI - scCountryAngle(d.iso)) * scYearRadius(year);\r\n        const y = Math.cos(Math.PI - scCountryAngle(d.iso)) * scYearRadius(year);\r\n        ctx.beginPath();\r\n        ctx.arc(x, y, scMortRate(yearData.value), 0, 2 * Math.PI);\r\n        ctx.fill();\r\n      });\r\n    });\r\n  }\r\n\r\n  onMount(() => {\r\n    ctx = canvas.getContext('2d');\r\n  });\r\n\r\n  $: if (ctx) init(width, height);\r\n  $: if (ctx && data) draw(width, height, selectedIso);\r\n</script>\r\n\r\n<canvas class=\"canvas-visual\"\r\n        bind:this={canvas}></canvas>\r\n\r\n<style>\r\n  canvas {\r\n    position: absolute;\r\n  }\r\n</style>\r\n",
    "<script>\r\n  import { extent } from 'd3-array';\r\n  import { scaleLinear } from 'd3-scale';\r\n  import { line as d3line, curveCardinal } from 'd3-shape';\r\n\r\n  export let data;\r\n  export let scMortRate;\r\n\r\n  let width = 0;\r\n  let height = 0;\r\n  let mortalityCircles = [];\r\n  let titleHeight = 0;\r\n\r\n  let scalesSet = false;\r\n  let xScale, yScale, reductionPath;\r\n\r\n  $: mortalityCircles = [80, 40, 20, 10, 5].map((d, i, a) => {\r\n      return {\r\n        mortalityRate: d,\r\n        r: scMortRate(d),\r\n        cx: scMortRate(a.slice(0, i + 1).reduce((a, c) => a + c)) + scMortRate(a.slice(0, Math.max(i, 1)).reduce((a, c) => a + c)) - (i === 0 ? scMortRate(d) : 0) + i * 20,\r\n        cy: height / 2\r\n      };\r\n    });\r\n\r\n  function setupScales(width, height) {\r\n    if (width === 0 || height === 0) return;\r\n\r\n    xScale = scaleLinear()\r\n      .domain([0, 10])\r\n      .range([mortalityCircles[mortalityCircles.length - 1].cx + width / 15, width - width / 20]);\r\n\r\n    yScale = scaleLinear()\r\n      .domain(extent(reductionData.map(d => d.reduction)))\r\n      .range([height * 2/3, height / 3]);\r\n\r\n    reductionPath = d3line()\r\n      .x((_, i) => xScale(i))\r\n      .y(d => yScale(d.reduction))\r\n      .curve(curveCardinal);\r\n  }\r\n\r\n  $: titleHeight = mortalityCircles[0].cy - mortalityCircles[0].r - 30;\r\n  $: reductionData = [...data.slice(55, 65), data[55]];\r\n  $: if (mortalityCircles && reductionData) setupScales(width, height);\r\n  $: if (xScale && yScale && reductionPath) scalesSet = true;\r\n\r\n</script>\r\n\r\n<div class=\"container\" bind:offsetWidth={width} bind:offsetHeight={height}>\r\n  <svg width=\"100%\" height=\"100%\">\r\n    {#if scalesSet}\r\n      <defs>\r\n        <linearGradient id=\"legend-reduction-gradient\"\r\n                        x1=\"0\"\r\n                        y1=\"100%\"\r\n                        x2=\"0\"\r\n                        y2=\"0\">\r\n          <stop offset=\"0\" stop-color=\"#A6D9F7\" />\r\n          <stop offset=\"0.40\" stop-color=\"#A6D9F7\" />\r\n          <stop offset=\"0.40\" stop-color=\"#F40000\" />\r\n          <stop offset=\"1\" stop-color=\"#F40000\" />\r\n        </linearGradient>\r\n      </defs>\r\n      <g class=\"titles\" transform=\"translate(0 {titleHeight})\">\r\n        <text>Deaths / 1,000 births</text>\r\n        <text transform=\"translate({xScale.range()[0]} 0)\">Deaths from 1998 to 2018</text>\r\n      </g>\r\n      <g class=\"mortality-circles\" transform=\"translate(0 0)\">\r\n        {#each mortalityCircles as d}\r\n          <circle class=\"mortality-circle\"\r\n                  cx={d.cx}\r\n                  cy={d.cy}\r\n                  r={d.r}></circle>\r\n          <text class=\"mortality-labels\" transform=\"translate({d.cx} {d.cy - d.r - 10})\">{d.mortalityRate}</text>\r\n        {/each}\r\n      </g>\r\n      <g class=\"reduction\">\r\n        <path class=\"reduction-path\"\r\n              d={reductionPath(reductionData)}\r\n              fill=\"url(#legend-reduction-gradient)\" />\r\n        <text class=\"reduction-label red\"\r\n              transform=\"translate({xScale.range()[0] + 5} {yScale.range()[1] + 15})\">increased</text>\r\n        <text class=\"reduction-label blue\"\r\n              transform=\"translate({xScale.range()[0] + 5} {yScale.range()[0] + 7})\">decreased</text>\r\n      </g>\r\n    {/if}\r\n  </svg>\r\n</div>\r\n\r\n<style>\r\n  .container {\r\n    max-width: 500px;\r\n  }\r\n\r\n  text {\r\n    fill: var(--blue);\r\n  }\r\n\r\n  g.titles {\r\n    font-size: 0.8rem;\r\n  }\r\n\r\n  circle.mortality-circle {\r\n    fill: var(--red);\r\n    stroke: none;\r\n    opacity: 1;\r\n  }\r\n\r\n  text.mortality-labels {\r\n    font-size: 0.7rem;\r\n    text-anchor: middle;\r\n  }\r\n\r\n  path.reduction-path {\r\n    stroke: none;\r\n  }\r\n\r\n  text.reduction-label {\r\n    font-size: 0.7rem;\r\n    text-anchor: start;\r\n  }\r\n\r\n  .red {\r\n    fill: var(--red);\r\n  }\r\n\r\n  .blue {\r\n    fill: var(--blue);\r\n  }\r\n</style>\r\n",
    "<script>\r\n  import { createEventDispatcher } from 'svelte';\r\n\r\n  export let data = [];\r\n\r\n  const dispatch = createEventDispatcher();\r\n  \r\n  let searchString = '';\r\n\r\n  function handleSearch(searchString) {\r\n    const searchedObj = searchData.find(d => d.tobesearched.indexOf(searchString.toUpperCase()) >= 0);\r\n    if (searchString && searchedObj && searchedObj.iso) {\r\n      dispatch('isochanged', searchedObj.iso);\r\n    } else {\r\n      dispatch('isochanged', undefined);\r\n    }\r\n  }\r\n\r\n  $: searchData = data.map(d => ({iso: d.iso, tobesearched: `${d.iso}|${d.country}`.toUpperCase()}));\r\n\r\n  $: handleSearch(searchString);\r\n</script>\r\n\r\n<label for=\"country\">Search by country</label>\r\n<input id=\"country\"\r\n       name=\"country\"\r\n       autocomplete=\"off\"\r\n       type=\"search\"\r\n       placeholder=\"Country name\"\r\n       bind:value={searchString}\r\n       on:click|stopPropagation={() => handleSearch(searchString)} />\r\n\r\n<style>\r\n  label {\r\n    margin: 0 0 0.7rem 0;\r\n  }\r\n\r\n  input {\r\n    width: 55%;\r\n    min-width: 200px;\r\n    padding: 0.4rem;\r\n    font-size: 1.1rem;\r\n    color: var(--dark);\r\n    background-color: var(--blue);\r\n    border: none;\r\n    border-radius: 0.5vmin;\r\n    -webkit-appearance: none;\r\n  }\r\n</style>\r\n",
    "<script>\r\n  import { extent, max } from 'd3-array';\r\n  import { scaleLinear } from 'd3-scale';\r\n  import { line as d3line, curveCardinal } from 'd3-shape';\r\n\r\n  export let width;\r\n  export let height;\r\n  export let data;\r\n  export let selectedIso;\r\n  export let radius;\r\n\r\n  let dataArr, xScale, yScale, line, yLabels;\r\n\r\n  function updateScalesAndGenerators(radius) {\r\n    xScale = scaleLinear()\r\n      .domain(extent([].concat(...data.map(d => d.dataArr)).map(d => d.year)))\r\n      .range([-radius / 1.5, radius / 1.5]);\r\n\r\n    yScale = scaleLinear()\r\n      .domain([-10, max([].concat(...data.map(d => d.dataArr)).map(d => d.value))])\r\n      .range([radius / 2, -radius / 2]);\r\n      \r\n    line = d3line()\r\n      .x(d => xScale(d.year))\r\n      .y(d => yScale(d.value))\r\n      .curve(curveCardinal);\r\n\r\n    yLabels = [\r\n      {\r\n        x: xScale(dataArr[0].year) * 1.05,\r\n        y: yScale(dataArr[0].value) + Math.min(width, height) / 200,\r\n        text: Math.round(dataArr[0].value),\r\n        textAnchor: 'end'\r\n      },\r\n      {\r\n        x: xScale(dataArr[dataArr.length - 1].year) * 1.05,\r\n        y: yScale(dataArr[dataArr.length - 1].value) + Math.min(width, height) / 200,\r\n        text: Math.round(dataArr[dataArr.length - 1].value),\r\n        textAnchor: 'start'\r\n      }\r\n    ];\r\n  }\r\n\r\n  $: if (data && selectedIso) dataArr = data.find(d => d.iso === selectedIso).dataArr.filter(d => !isNaN(d.value));\r\n  $: if (data && dataArr) updateScalesAndGenerators(radius);\r\n</script>\r\n\r\n{#if (data && selectedIso)}\r\n  <g transform=\"translate({width / 2} {height / 2})\">\r\n    <text class=\"title\"\r\n          transform=\"translate(0 {yScale.range()[1] * 1.4})\">deaths / 1000 births</text>\r\n    <path d={line(dataArr)}\r\n          stroke=\"white\"\r\n          stroke-width=\"2\"\r\n          fill=\"none\"></path>\r\n    {#each yLabels as yLabel}\r\n      <text class=\"y-label\"\r\n            transform=\"translate({yLabel.x} {yLabel.y})\"\r\n            text-anchor={yLabel.textAnchor}>{yLabel.text}</text>\r\n    {/each}\r\n    <line x1={xScale.range()[0]}\r\n          y1={yScale.range()[0]}\r\n          x2={xScale.range()[1]}\r\n          y2={yScale.range()[0]}></line>\r\n    {#each xScale.domain() as xLabel, i}\r\n      <text class=\"x-label\"\r\n            transform=\"translate({xScale(xLabel)} {yScale.range()[0] * 1.25})\"\r\n            text-anchor={i % 2 === 0 ? 'start' : 'end'}>{xLabel}</text>\r\n    {/each}\r\n  </g>\r\n{/if}\r\n\r\n<style>\r\n  text.title {\r\n    font-size: calc(0.4rem + 0.5vmin);\r\n    text-anchor: middle;\r\n    fill: white;\r\n  }\r\n\r\n  text.y-label {\r\n    font-size: 0.7rem;\r\n    fill: white;\r\n  }\r\n  \r\n  line {\r\n    stroke: white;\r\n    stroke-width: 1;\r\n  }\r\n\r\n  text.x-label {\r\n    font-size: 0.6rem;\r\n    fill: white;\r\n  }\r\n\r\n</style>\r\n",
    "<script>\r\n  import { select } from 'd3-selection';\r\n  import { transition } from 'd3-transition';\r\n\r\n  export let width;\r\n  export let height;\r\n  export let data;\r\n  export let years;\r\n  export let scCountryAngle;\r\n  export let scYearRadius;\r\n  export let scMortRate;\r\n  export let scReduction;\r\n  export let selectedIso;\r\n\r\n  let reduction;\r\n  let container;\r\n  let modelYears, modelReduction;\r\n\r\n  function update(selectedIso) {\r\n    if (!selectedIso) {\r\n      modelYears = [];\r\n      reduction = 0;\r\n      modelReduction = [];\r\n    } else {\r\n      reduction = data.find(d => d.iso === selectedIso).reduction;\r\n      modelReduction = [{\r\n        cx: Math.sin(Math.PI - scCountryAngle(selectedIso)) * scReduction(reduction) * (reduction <= 0 ? 0.97 : 1.03),\r\n        cy: Math.cos(Math.PI - scCountryAngle(selectedIso)) * scReduction(reduction) * (reduction <= 0 ? 0.97 : 1.03),\r\n        r: Math.min(width, height) / 200\r\n      }];\r\n      modelYears = data.find(d => d.iso === selectedIso).dataArr.filter(d => years.includes(d.year)) || [];\r\n    }\r\n\r\n    // the three year highlighters\r\n    select(container).selectAll('.year-circle')\r\n      .data(modelYears)\r\n      .join(enter => enter.append('circle')\r\n                      .attr('class', 'year-circle')\r\n                      .attr('fill', 'white')\r\n                      .attr('opacity', 0.6)\r\n                      .attr('cx', 0)\r\n                      .attr('cy', 0)\r\n                      .attr('r', 0)\r\n                      .call(enter => enter.transition().duration(100)\r\n                        .attr('cx', d => Math.sin(Math.PI - scCountryAngle(selectedIso)) * scYearRadius(d.year))\r\n                        .attr('cy', d => Math.cos(Math.PI - scCountryAngle(selectedIso)) * scYearRadius(d.year))\r\n                        .attr('r', d => scMortRate(d.value))),\r\n            update => update.transition().duration(100)\r\n                        .attr('cx', d => Math.sin(Math.PI - scCountryAngle(selectedIso)) * scYearRadius(d.year))\r\n                        .attr('cy', d => Math.cos(Math.PI - scCountryAngle(selectedIso)) * scYearRadius(d.year))\r\n                        .attr('r', d => scMortRate(d.value)),\r\n            exit => exit.transition().duration(100)\r\n                      .attr('cx', 0)\r\n                      .attr('cy', 0)\r\n                      .attr('r', 0)\r\n                      .remove()\r\n      );\r\n\r\n    // the reduction highlighter\r\n    select(container).selectAll('.reduction-circle')\r\n      .data(modelReduction)\r\n      .join(enter => enter.append('circle')\r\n                      .attr('class', `reduction-circle ${reduction <= 0 ? 'decreased' : 'increased'}`)\r\n                      .attr('cx', 0)\r\n                      .attr('cy', 0)\r\n                      .attr('r', 0)\r\n                      .call(enter => enter.transition().duration(100)\r\n                        .attr('cx', d => d.cx)\r\n                        .attr('cy', d => d.cy)\r\n                        .attr('r', d => d.r)),\r\n            update => update\r\n                        .attr('class', `reduction-circle ${reduction <= 0 ? 'decreased' : 'increased'}`)\r\n                        .transition().duration(100)\r\n                          .attr('cx', d => d.cx)\r\n                          .attr('cy', d => d.cy)\r\n                          .attr('r', d => d.r),\r\n            exit => exit.transition().duration(100)\r\n                      .attr('cx', 0)\r\n                      .attr('cy', 0)\r\n                      .attr('r', 0)\r\n                      .remove()\r\n      );\r\n  }\r\n\r\n  $: if (container) update(selectedIso);\r\n</script>\r\n\r\n<g transform=\"translate({width / 2} {height / 2})\" bind:this={container}></g>\r\n\r\n<style>\r\n  :global(circle.increased) {\r\n    opacity: 1;\r\n    fill: var(--red);\r\n  }\r\n\r\n  :global(circle.decreased) {\r\n    opacity: 1;\r\n    fill: var(--blue);\r\n  }\r\n</style>\r\n",
    "<script>\r\n  import { arc as d3arc } from 'd3-shape';\r\n\r\n  export let width;\r\n  export let height;\r\n  export let data;\r\n  export let years;\r\n  export let scYearRadius;\r\n\r\n  const shrinkFactor = 0.62;\r\n  const lineThicknessFactor = 1.05;\r\n  const labelOffsetFactor = 1.1;\r\n\r\n  let arc, labelArc;\r\n\r\n  // The arcs\r\n  function defineArcs() {\r\n    const innerAreaRadius = scYearRadius(years[0]) * shrinkFactor;\r\n    arc = d3arc()\r\n      .startAngle(d => d.startAngle)\r\n      .endAngle(d => d.endAngle)\r\n      .innerRadius(innerAreaRadius)\r\n      .outerRadius(innerAreaRadius * lineThicknessFactor)\r\n      .cornerRadius(7);\r\n\r\n    labelArc = d3arc()\r\n      .startAngle(d => d.startAngle)\r\n      .endAngle(d => d.endAngle)\r\n      .innerRadius(innerAreaRadius * labelOffsetFactor)\r\n      .outerRadius(innerAreaRadius * labelOffsetFactor);\r\n  }\r\n\r\n  $: if (scYearRadius) defineArcs();\r\n</script>\r\n\r\n{#if data}\r\n  <g transform=\"translate({width / 2} {height / 2})\">\r\n    {#each data as d}\r\n      <path class=\"continent-arc\" d={arc(d)}></path>\r\n      <path class=\"continent-label-arc\" id=\"continent-label-arc-{d.continent}\" d={labelArc(d)}></path>\r\n      <text>\r\n        <textPath class=\"continent-label\" href=\"#continent-label-arc-{d.continent}\" startOffset=\"25%\">\r\n          {d.continent}\r\n        </textPath>\r\n      </text>\r\n    {/each}\r\n  </g>\r\n{/if}\r\n\r\n<style>\r\n  path.continent-arc {\r\n    fill: var(--blue);\r\n  }\r\n  path.continent-label-arc {\r\n    fill: none;\r\n  }\r\n\r\n  textPath.continent-label {\r\n    fill: #A6D9F7;\r\n    text-anchor: middle;\r\n    font-family: Arial, sans-serif;\r\n    font-size: 0.55rem;\r\n  }\r\n</style>\r\n",
    "<script>\r\n  export let width;\r\n  export let height;\r\n  export let years;\r\n  export let scYearRadius;\r\n</script>\r\n\r\n<g transform=\"translate({width / 2} {height / 2})\">\r\n  {#each years as year}\r\n    <text transform=\"translate(0 {-scYearRadius(year) + Math.min(width, height) / 22})\">{year}</text>\r\n  {/each}\r\n</g>\r\n\r\n<style>\r\n  text {\r\n    fill: var(--blue);\r\n    font-size: 0.6rem;\r\n    text-anchor: middle;\r\n  }\r\n</style>\r\n"
  ],
  "names": [],
  "mappings": "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"
}