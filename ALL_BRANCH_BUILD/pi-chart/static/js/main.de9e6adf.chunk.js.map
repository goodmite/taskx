{"version":3,"sources":["logo.svg","App.js","reportWebVitals.js","index.js"],"names":["height","window","innerHeight","width","innerWidth","arc","d3","innerRadius","outerRadius","App","useState","data","setData","useEffect","_","then","dataArg","overflow","transform","map","e","index","fill","d","startAngle","Math","PI","length","endAngle","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0NAAe,I,oBCOTA,EAASC,OAAOC,YAChBC,EAAQF,OAAOG,WACfC,EAAMC,MACPC,YAAY,GACZC,YAAmB,IAAPR,GA2BFS,MA1Bf,WACI,IADW,EAEaC,mBAAS,MAFtB,mBAEJC,EAFI,KAEEC,EAFF,KASX,OANAC,qBAAU,SAAAC,GACNR,IAXI,qGAYCS,MAAK,SAAAC,GACFJ,EAAQI,QAEjB,IAEC,qBAAKb,MAAOA,EAAOH,OAAQA,EAAQiB,SAAU,SAA7C,SACI,mBAAGC,UAAS,oBAAef,EAAM,GAArB,aAA4BH,EAAO,EAAnC,KAAZ,SAEQW,GAAQA,EAAKQ,KAAI,SAACC,EAAGC,GACjB,OACI,sBAAMrB,OAAQ,IAAKsB,KAAMF,EAAE,iBAAkBG,EAAGlB,EAAI,CAChDmB,WAAoB,EAARH,EAAWI,KAAKC,GAAIf,EAAKgB,OACrCC,SAAyB,GAAbP,EAAQ,GAAQI,KAAKC,GAAIf,EAAKgB,mBCjB3DE,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBhB,MAAK,YAAkD,IAA/CiB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.de9e6adf.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import logo from './logo.svg';\r\nimport './App.css';\r\nimport * as d3 from \"d3\";\r\nimport {useState, useEffect} from \"react\";\r\n\r\nconst url = \"https://gist.githubusercontent.com/curran/b236990081a24761f7000567094914e0/raw/cssNamedColors.csv\";\r\n\r\nconst height = window.innerHeight;\r\nconst width = window.innerWidth;\r\nconst arc = d3.arc()\r\n    .innerRadius(0)\r\n    .outerRadius(height*100)\r\nfunction App() {\r\n    let message;\r\n    const [data, setData] = useState(null);\r\n    useEffect(_ => {\r\n        d3.csv(url)\r\n            .then(dataArg => {\r\n                setData(dataArg);\r\n            })\r\n    }, [])\r\n    return (\r\n        <svg width={width} height={height} overflow={'hidden'}>\r\n            <g transform={`translate(${width/10}, ${height/5})`}>\r\n                {\r\n                    data && data.map((e, index) => {\r\n                        return (\r\n                            <path height={200} fill={e['RGB hex value']} d={arc({\r\n                                startAngle:(index * 2* Math.PI/(data.length)),\r\n                                endAngle: ((index + 1) * 2* Math.PI/(data.length)),\r\n                            })}></path>\r\n                        )\r\n                    })}\r\n            </g>\r\n        </svg>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}