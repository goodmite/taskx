{"version":3,"sources":["logo.svg","App.js","reportWebVitals.js","index.js"],"names":["margin","App","useState","data","setData","useEffect","_","d3","d","population","then","dataArg","slice","innerHeight","innerWidth","yScale","domain","map","Country","range","paddingInner","maxPop","xScale","width","height","transform","ticks","tickValue","className","y2","stroke","style","y","dy","replace","bandwidth","x","textAnchor","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6NAAe,I,oBCUTA,EACG,GADHA,EAEM,GAFNA,EAGI,IAHJA,EAIK,GA0EIC,MAvEf,WAAgB,IAAD,EACaC,mBAAS,MADtB,mBACJC,EADI,KACEC,EADF,KAaX,GAXAC,qBAAU,SAAAC,GAMNC,IAnBJ,kJAcgB,SAAAC,GAGR,OADAA,EAAEC,WAA4B,KAAbD,EAAE,MACZA,KAGNE,MAAK,SAAAC,GACFP,EAAQO,EAAQC,MAAM,EAAG,UAElC,KACET,EACD,OAAO,6CAGX,IAAMU,EA1BK,IA0BkBb,EAAaA,EACpCc,EA1BI,IA0BiBd,EAAcA,EAEnCe,EAASR,MACVS,OAAOb,EAAKc,KAAI,SAAAT,GAAC,OAAIA,EAAEU,YACvBC,MAAM,CAAC,EAAGN,IACVO,aAAa,IACZC,EAASd,IAAOJ,GAAM,SAAAK,GAAC,OAAIA,EAAEC,cAC7Ba,EAASf,MACVS,OAAO,CAAC,EAAGK,IACXF,MAAM,CAAC,EAAGL,IACf,OACI,mCACI,qBAAKS,MAtCH,IAsCiBC,OAvChB,IAuCH,SACI,oBAAGC,UAAS,oBAAezB,EAAf,aAA+BA,EAA/B,KAAZ,UAEQsB,EAAOI,QAAQT,KAAI,SAAAU,GAAS,OACxB,oBAAGC,UAAW,OAAQH,UAAS,oBAAeH,EAAOK,GAAtB,KAAqC,EAArC,KAA/B,UACI,sBAAME,GAAIhB,EAAaiB,OAAQ,UAC/B,sBAAMC,MAAO,CAAC,WAAc,UAAWC,EAAGnB,EAAc,EAAGoB,GAAG,QAA9D,SACK1B,IAAU,MAAVA,CAAiBoB,GAAWO,QAAQ,IAAK,aAMtDnB,EAAOC,SAASC,KAAI,SAAAU,GAAS,OACzB,mBAAGC,UAAW,OAAQH,UAAS,oBAAe,EAAf,KAAqBV,EAAOY,GAAaZ,EAAOoB,YAAY,EAA5D,KAA/B,SACI,uBAAMJ,MAAO,CAAC,WAAc,OAAQK,GAAI,EAAGH,GAAI,QAA/C,cAA0DN,EAA1D,YAIZ,sBAAMC,UAAW,aAAcQ,EAAGtB,EAAW,EAAGkB,EAAGnB,EA9B3C,GA8B0EwB,WAAY,SAA9F,wBACClC,EAAKc,KAAI,SAACT,GAAD,OACN,sBACIoB,UAAW,OAEXI,EAAGjB,EAAOP,EAAEU,SACZK,MAAOD,EAAOd,EAAEC,YAChBe,OAAQT,EAAOoB,YALnB,SAOI,gCAEQ5B,IAAU,MAAVA,CAAkBC,EAAEC,YAAayB,QAAQ,IAAK,QAPjD1B,EAAEU,oBC1DpBoB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqB9B,MAAK,YAAkD,IAA/C+B,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.5620c662.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import logo from './logo.svg';\r\nimport './App.css';\r\nimport * as d3 from \"d3\";\r\nimport {useState, useEffect} from \"react\";\r\n\r\nconst url =\r\n    'https://gist.githubusercontent.com/curran/0ac4077c7fc6390f5dd33bf5c06cb5ff/raw/605c54080c7a93a417a3cea93fd52e7550e76500/UN_Population_2019.csv';\r\n\r\nconst height = 500;\r\nconst width = 800;\r\nconst margin = {\r\n    top: 20,\r\n    bottom: 60,\r\n    left: 220,\r\n    right: 10,\r\n}\r\n\r\nfunction App() {\r\n    const [data, setData] = useState(null);\r\n    useEffect(_ => {\r\n        const row = d => {\r\n            /*create another row named 2020, which contains int, not string*/\r\n            d.population = (+d['2020']) * 1000;\r\n            return d;\r\n        }\r\n        d3.csv(url, row)\r\n            .then(dataArg => {\r\n                setData(dataArg.slice(0, 10));\r\n            })\r\n    }, [])\r\n    if (!data) {\r\n        return <pre>Loading...</pre>;\r\n    }\r\n\r\n    const innerHeight = height - margin.top - margin.bottom;\r\n    const innerWidth = width - margin.left - margin.right;\r\n    const axisLabelOffset = 60;\r\n    const yScale = d3.scaleBand()\r\n        .domain(data.map(d => d.Country))\r\n        .range([0, innerHeight])\r\n        .paddingInner(0.1);\r\n    const maxPop = d3.max(data, d => d.population);\r\n    const xScale = d3.scaleLinear()\r\n        .domain([0, maxPop])\r\n        .range([0, innerWidth])\r\n    return (\r\n        <>\r\n            <svg width={width} height={height}>\r\n                <g transform={`translate(${margin.left}, ${margin.right})`}>\r\n                    {\r\n                        xScale.ticks().map(tickValue => (\r\n                            <g className={'tick'} transform={`translate(${xScale(tickValue)}, ${0})`}>\r\n                                <line y2={innerHeight} stroke={'black'}/>\r\n                                <text style={{'textAnchor': 'middle'}} y={innerHeight + 5} dy=\".71em\">\r\n                                    {d3.format(\".2s\")(tickValue).replace('G', 'B')}\r\n                                </text>\r\n                            </g>\r\n                        ))\r\n                    }\r\n                    {\r\n                        yScale.domain().map(tickValue => (\r\n                            <g className={'tick'} transform={`translate(${0}, ${yScale(tickValue) + yScale.bandwidth()/2})`}>\r\n                                <text style={{'textAnchor': 'end'}} x={-3} dy={'.32em'}> {tickValue} </text>\r\n                            </g>\r\n                        ))\r\n                    }\r\n                    <text className={'axis-label'} x={innerWidth/2} y={innerHeight + axisLabelOffset} textAnchor={'middle'}>Population</text>\r\n                    {data.map((d) => (\r\n                        <rect\r\n                            className={'mark'}\r\n                            key={d.Country}\r\n                            y={yScale(d.Country)}\r\n                            width={xScale(d.population)}\r\n                            height={yScale.bandwidth()}\r\n                        >\r\n                            <title>\r\n                                {\r\n                                    d3.format(\".2s\")((d.population)).replace('G', 'B')\r\n                                }\r\n                            </title>\r\n                        </rect>\r\n                    ))}\r\n                </g>\r\n            </svg>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}